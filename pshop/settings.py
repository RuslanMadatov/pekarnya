"""
Django settings for pshop project.

Generated by 'django-admin startproject' using Django 4.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path

import os

from dotenv import load_dotenv, find_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
# Работа с env

load_dotenv(find_dotenv(filename='.env.dev'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('DJANGO_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = os.getenv('DEBUG_TRUE')

# ALLOWED_HOSTS = [os.getenv('ALLOWED_HOSTS')]
ADMINS = [
    ('Madatov R', 'example@mail.ru'),
]
# CSRF_TRUSTED_ORIGINS = [os.getenv('CSRF_TRUSTED_ORIGINS')]
DEBUG = True
# Application definition
SITE_ID = 1

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'shop.apps.ShopConfig',
    'cart.apps.CartConfig',
    'orders.apps.OrdersConfig',
    'payment.apps.PaymentConfig',
    'django.contrib.sites',
    'django.contrib.sitemaps',
    # 'django_celery_beat',
    'robots',
    'phonenumber_field',
    'captcha',
    'simplemathcaptcha',
    'django_cleanup',

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'pshop.urls'

# чтобы была корзина нужно добавить контекстный процессор
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                # 'cart.context_processors.cart',
            ],
        },
    },
]

# для robot.txt
TEMPLATE_LOADERS = ['django.template.loaders.app_directories.Loader', ]

# для robot.txt
ROBOTS_SITEMAP_URLS = [
    'http://www.example.com/sitemap.xml',
]

WSGI_APPLICATION = 'pshop.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql',
#         'NAME': os.getenv("DATABASE_NAME"),
#         'USER': os.getenv("DATABASE_USER"),
#         'PASSWORD': os.getenv("DATABASE_PASSWORD"),
#         'HOST': '127.0.0.1',
#         'PORT': '5432'
#     }
# }

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'ru'

TIME_ZONE = 'Europe/Moscow'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / 'static'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

MEDIA_URL = 'media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Это ключ, по которому мы будем хранить данные корзины в сессии
# CART_SESSION_ID = 'cart'

# Данные юкасса
YOCASSA_ACCOUNT_ID = os.getenv("YOKASSA_ID")
YOCASSA_SECRET_KEY = os.getenv("YOKASSA_TOKEN")

# В этом случае Django будет сохранять сеанс в базе данных при каждом запросе, даже если сеанс не изменился.
# SESSION_SAVE_EVERY_REQUEST = True

# ngrok
# ALLOWED_HOSTS = [
#     'pshop.com', 'localhost', '127.0.0.1', '6761-95-106-125-137.ngrok-free.app'

# ]
#  запуск: ngrok http 8000

# CSRF_TRUSTED_ORIGINS = ['https://6761-95-106-125-137.ngrok-free.app']

# настройка почтового клиента
# отправляет письма на почтовый сервер по протоколу SMTP. Может использоваться как при разработке
# сайта, так и при его эксплуатации
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'

# настрока почтового клиента для mail.ru
EMAIL_HOST = 'smtp.mail.ru'
EMAIL_HOST_USER = os.getenv('EMAIL_USER')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_PASSWORD')
DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_EMAIL')
EMAIL_PORT = 2525
EMAIL_USE_TLS = True
EMAIL_USE_SSL = False



#  настройка cellery
# ри пароле редис "redis://:bb6fa8c8e6d200ed54f831ccc192bb0d50c9cd48627bf0a28dcf4e54f2d8caba@127.0.0.1:6379/1"
# CELERY_BROKER_URL = "amqp://guest:guest@localhost:5672//"  # or Redis instead of RabbitMQ

# CELERY_TASK_SERIALIZER = "json"
# CELERY_RESULT_SERIALIZER = "json"
# CELERY_ACCEPT_CONTENT = ["json"]
# CELERY_ENABLE_UTC = True
# # CELERY_BROKER_TRANSPORT_OPTIONS = {"visibility_timeout": 3600}
# CELERY_BROKER_URL = "redis://127.0.0.1:6379/0"
# CELERY_RESULT_BACKEND = "redis://127.0.0.1:6379/0"
# CELERY_TIMEZONE = 'Europe/Moscow'

# для удаления старых сессий из бд django_celery_beat
# CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'

# для кэширования
# CACHES = {
#     'default': {
#         'BACKEND': 'django.core.cache.backends.redis.RedisCache',
#         'LOCATION': 'redis://:bb6fa8c8e6d200ed54f831ccc192bb0d50c9cd48627bf0a28dcf4e54f2d8caba@127.0.0.1:6379/0',
#
#     }
# }
# THUMBNAIL_ALIASES = {
#     '': {
#         'thumb': {'size': (300, 0), 'crop': 'smart'},
#         'thumb_2': {'size': (500, 0), 'crop': 'smart'},
#     },
# }

# для игнорирования ошибки 404 для менеджеров для админа не работает
# IGNORABLE_404_URLS = [
#     re.compile(r"^/apple-touch-icon.*\.png$"),
#     re.compile(r"^/favicon\.ico$"),
#     re.compile(r"^/robots\.txt$"),
#     re.compile(r"^/\.git/config"),
#     re.compile(r"^/geoserver/web/"),
#     re.compile(r"^/webui/"),
#     re.compile(r"^/\.env$"),
#     re.compile(r"^/autodiscove/"),
#     re.compile(r"^/autodiscover/autodiscoverrs/"),
#     re.compile(r"^/autodiscover/autodiscover%20/"),
#     re.compile(r"^/autodiscover/autodiscovers/"),
#     re.compile(r"^/ews/autodiscovers/"),
#     re.compile(r"^/ews/ews/"),
#     re.compile(r"^/ews/%20/"),
#     re.compile(r"^/ews/exchange/"),
#     re.compile(r"^/ews/exchange%20/"),
#     re.compile(r"^/ews/exchanges/"),
#
# ]

# для django-phonenumber-field[phonenumberslite]
PHONENUMBER_DB_FORMAT = "NATIONAL"
PHONENUMBER_DEFAULT_REGION = 'RU'

# CAPTCHA_CHALLENGE_FUNCT = 'captcha.helpers.math_challenge'
# LOGGING = {
#     # Define the logging version
#     'version': 1,
#     # Enable the existing loggers
#     'disable_existing_loggers': False,

#     # Define the handlers
#     'handlers': {
#         'file_django': {
#             'level': 'WARNING',
#             'class': 'logging.handlers.TimedRotatingFileHandler',
#             'when': 'D',
#             'interval': 1,
#             'backupCount': 3,
#             'encoding': 'utf8',
#             'filename': 'djangoapp.log',
#             'formatter': 'app',
#         },


#         'mail_admins': {
#             'level': 'WARNING',
#             'filters': ['require_debug_false'],
#             'class': 'django.utils.log.AdminEmailHandler',
#             "include_html": True,

#         },

#         'console': {
#             'level': 'WARNING',
#             'class': 'logging.StreamHandler',
#             'formatter': 'app',
#         },


#     },

#     "root": {
#         "handlers": ["console"],
#         "level": "WARNING",
#     },

#     # Define the loggers
#     'loggers': {
#         'django': {
#             'handlers': ['file_django', 'mail_admins'], #, 'mail_admins'],
#             'level': 'WARNING',
#             'propagate': True,

#         }

        
#     },

#     "formatters": {
#         "app": {
#             "format": (
#                 u"%(asctime)s [%(levelname)-8s] "
#                 "(%(module)s.%(funcName)s) %(message)s"
#             ),
#             "datefmt": "%Y-%m-%d %H:%M:%S",
#         },
#     },

#     "filters": {
#         "require_debug_false": {
#             "()": "django.utils.log.RequireDebugFalse",
#         },
#     },
# }

# Безопасность
# CSRF_COOKIE_SECURE = True
# SESSION_COOKIE_SECURE = True
# SECURE_SSL_REDIRECT = True
# SECURE_SSL_REDIRECT = True
# CSRF_COOKIE_SECURE = True